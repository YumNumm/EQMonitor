// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: notification_payload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Eqmonitor_JmaIntensity: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case jmaIntensity0 // = 10
  case jmaIntensity1 // = 20
  case jmaIntensity2 // = 30
  case jmaIntensity3 // = 40
  case jmaIntensity4 // = 45
  case jmaIntensity5Minus // = 50
  case jmaIntensity5Plus // = 55
  case jmaIntensity6Minus // = 60
  case jmaIntensity6Plus // = 65
  case jmaIntensity7 // = 70
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 10: self = .jmaIntensity0
    case 20: self = .jmaIntensity1
    case 30: self = .jmaIntensity2
    case 40: self = .jmaIntensity3
    case 45: self = .jmaIntensity4
    case 50: self = .jmaIntensity5Minus
    case 55: self = .jmaIntensity5Plus
    case 60: self = .jmaIntensity6Minus
    case 65: self = .jmaIntensity6Plus
    case 70: self = .jmaIntensity7
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .jmaIntensity0: return 10
    case .jmaIntensity1: return 20
    case .jmaIntensity2: return 30
    case .jmaIntensity3: return 40
    case .jmaIntensity4: return 45
    case .jmaIntensity5Minus: return 50
    case .jmaIntensity5Plus: return 55
    case .jmaIntensity6Minus: return 60
    case .jmaIntensity6Plus: return 65
    case .jmaIntensity7: return 70
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Eqmonitor_JmaIntensity: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Eqmonitor_JmaIntensity] = [
    .unspecified,
    .jmaIntensity0,
    .jmaIntensity1,
    .jmaIntensity2,
    .jmaIntensity3,
    .jmaIntensity4,
    .jmaIntensity5Minus,
    .jmaIntensity5Plus,
    .jmaIntensity6Minus,
    .jmaIntensity6Plus,
    .jmaIntensity7,
  ]
}

#endif  // swift(>=4.2)

struct Eqmonitor_NotificationPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventID: String = String()

  var type: Eqmonitor_NotificationPayload.TypeEnum = .unspecified

  var information: Eqmonitor_NotificationPayload.OneOf_Information? = nil

  var eewInformation: Eqmonitor_NotificationPayload.EewInformation {
    get {
      if case .eewInformation(let v)? = information {return v}
      return Eqmonitor_NotificationPayload.EewInformation()
    }
    set {information = .eewInformation(newValue)}
  }

  var earthquakeInformation: Eqmonitor_NotificationPayload.EarthquakeInformation {
    get {
      if case .earthquakeInformation(let v)? = information {return v}
      return Eqmonitor_NotificationPayload.EarthquakeInformation()
    }
    set {information = .earthquakeInformation(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Information: Equatable {
    case eewInformation(Eqmonitor_NotificationPayload.EewInformation)
    case earthquakeInformation(Eqmonitor_NotificationPayload.EarthquakeInformation)

  #if !swift(>=4.1)
    static func ==(lhs: Eqmonitor_NotificationPayload.OneOf_Information, rhs: Eqmonitor_NotificationPayload.OneOf_Information) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.eewInformation, .eewInformation): return {
        guard case .eewInformation(let l) = lhs, case .eewInformation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.earthquakeInformation, .earthquakeInformation): return {
        guard case .earthquakeInformation(let l) = lhs, case .earthquakeInformation(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case earthquake // = 1
    case eew // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .earthquake
      case 2: self = .eew
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .earthquake: return 1
      case .eew: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct EewInformation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hypoInformation: Eqmonitor_NotificationPayload.HypoInformation {
      get {return _hypoInformation ?? Eqmonitor_NotificationPayload.HypoInformation()}
      set {_hypoInformation = newValue}
    }
    /// Returns true if `hypoInformation` has been explicitly set.
    var hasHypoInformation: Bool {return self._hypoInformation != nil}
    /// Clears the value of `hypoInformation`. Subsequent reads from it will return its default value.
    mutating func clearHypoInformation() {self._hypoInformation = nil}

    var maxIntensity: Eqmonitor_JmaIntensity {
      get {return _maxIntensity ?? .unspecified}
      set {_maxIntensity = newValue}
    }
    /// Returns true if `maxIntensity` has been explicitly set.
    var hasMaxIntensity: Bool {return self._maxIntensity != nil}
    /// Clears the value of `maxIntensity`. Subsequent reads from it will return its default value.
    mutating func clearMaxIntensity() {self._maxIntensity = nil}

    var regionIntensities: [Eqmonitor_NotificationPayload.EewRegionIntensity] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _hypoInformation: Eqmonitor_NotificationPayload.HypoInformation? = nil
    fileprivate var _maxIntensity: Eqmonitor_JmaIntensity? = nil
  }

  struct EarthquakeInformation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hypoInformation: Eqmonitor_NotificationPayload.HypoInformation {
      get {return _hypoInformation ?? Eqmonitor_NotificationPayload.HypoInformation()}
      set {_hypoInformation = newValue}
    }
    /// Returns true if `hypoInformation` has been explicitly set.
    var hasHypoInformation: Bool {return self._hypoInformation != nil}
    /// Clears the value of `hypoInformation`. Subsequent reads from it will return its default value.
    mutating func clearHypoInformation() {self._hypoInformation = nil}

    var maxIntensity: Eqmonitor_JmaIntensity {
      get {return _maxIntensity ?? .unspecified}
      set {_maxIntensity = newValue}
    }
    /// Returns true if `maxIntensity` has been explicitly set.
    var hasMaxIntensity: Bool {return self._maxIntensity != nil}
    /// Clears the value of `maxIntensity`. Subsequent reads from it will return its default value.
    mutating func clearMaxIntensity() {self._maxIntensity = nil}

    var regionIntensities: [Eqmonitor_NotificationPayload.RegionIntensity] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _hypoInformation: Eqmonitor_NotificationPayload.HypoInformation? = nil
    fileprivate var _maxIntensity: Eqmonitor_JmaIntensity? = nil
  }

  struct RegionIntensity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: String = String()

    var intensity: Eqmonitor_JmaIntensity = .unspecified

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EewRegionIntensity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: String = String()

    var intensity: Eqmonitor_JmaIntensity = .unspecified

    var arrivalTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _arrivalTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_arrivalTime = newValue}
    }
    /// Returns true if `arrivalTime` has been explicitly set.
    var hasArrivalTime: Bool {return self._arrivalTime != nil}
    /// Clears the value of `arrivalTime`. Subsequent reads from it will return its default value.
    mutating func clearArrivalTime() {self._arrivalTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _arrivalTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  struct HypoInformation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: Int32 = 0

    var name: String = String()

    var latitude: Float = 0

    var longitude: Float = 0

    var depth: Int32 = 0

    var magnitude: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

#if swift(>=4.2)

extension Eqmonitor_NotificationPayload.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Eqmonitor_NotificationPayload.TypeEnum] = [
    .unspecified,
    .earthquake,
    .eew,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Eqmonitor_JmaIntensity: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload.OneOf_Information: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload.TypeEnum: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload.EewInformation: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload.EarthquakeInformation: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload.RegionIntensity: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload.EewRegionIntensity: @unchecked Sendable {}
extension Eqmonitor_NotificationPayload.HypoInformation: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "eqmonitor"

extension Eqmonitor_JmaIntensity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JMA_INTENSITY_UNSPECIFIED"),
    10: .same(proto: "JMA_INTENSITY_0"),
    20: .same(proto: "JMA_INTENSITY_1"),
    30: .same(proto: "JMA_INTENSITY_2"),
    40: .same(proto: "JMA_INTENSITY_3"),
    45: .same(proto: "JMA_INTENSITY_4"),
    50: .same(proto: "JMA_INTENSITY_5_MINUS"),
    55: .same(proto: "JMA_INTENSITY_5_PLUS"),
    60: .same(proto: "JMA_INTENSITY_6_MINUS"),
    65: .same(proto: "JMA_INTENSITY_6_PLUS"),
    70: .same(proto: "JMA_INTENSITY_7"),
  ]
}

extension Eqmonitor_NotificationPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotificationPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_id"),
    2: .same(proto: "type"),
    3: .standard(proto: "eew_information"),
    4: .standard(proto: "earthquake_information"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.eventID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try {
        var v: Eqmonitor_NotificationPayload.EewInformation?
        var hadOneofValue = false
        if let current = self.information {
          hadOneofValue = true
          if case .eewInformation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.information = .eewInformation(v)
        }
      }()
      case 4: try {
        var v: Eqmonitor_NotificationPayload.EarthquakeInformation?
        var hadOneofValue = false
        if let current = self.information {
          hadOneofValue = true
          if case .earthquakeInformation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.information = .earthquakeInformation(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    switch self.information {
    case .eewInformation?: try {
      guard case .eewInformation(let v)? = self.information else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .earthquakeInformation?: try {
      guard case .earthquakeInformation(let v)? = self.information else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eqmonitor_NotificationPayload, rhs: Eqmonitor_NotificationPayload) -> Bool {
    if lhs.eventID != rhs.eventID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.information != rhs.information {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eqmonitor_NotificationPayload.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "TYPE_EARTHQUAKE"),
    2: .same(proto: "TYPE_EEW"),
  ]
}

extension Eqmonitor_NotificationPayload.EewInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Eqmonitor_NotificationPayload.protoMessageName + ".EewInformation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hypo_information"),
    2: .standard(proto: "max_intensity"),
    3: .standard(proto: "region_intensities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._hypoInformation) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._maxIntensity) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.regionIntensities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hypoInformation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._maxIntensity {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    if !self.regionIntensities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.regionIntensities, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eqmonitor_NotificationPayload.EewInformation, rhs: Eqmonitor_NotificationPayload.EewInformation) -> Bool {
    if lhs._hypoInformation != rhs._hypoInformation {return false}
    if lhs._maxIntensity != rhs._maxIntensity {return false}
    if lhs.regionIntensities != rhs.regionIntensities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eqmonitor_NotificationPayload.EarthquakeInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Eqmonitor_NotificationPayload.protoMessageName + ".EarthquakeInformation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hypo_information"),
    2: .standard(proto: "max_intensity"),
    3: .standard(proto: "region_intensities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._hypoInformation) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._maxIntensity) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.regionIntensities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hypoInformation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._maxIntensity {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    if !self.regionIntensities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.regionIntensities, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eqmonitor_NotificationPayload.EarthquakeInformation, rhs: Eqmonitor_NotificationPayload.EarthquakeInformation) -> Bool {
    if lhs._hypoInformation != rhs._hypoInformation {return false}
    if lhs._maxIntensity != rhs._maxIntensity {return false}
    if lhs.regionIntensities != rhs.regionIntensities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eqmonitor_NotificationPayload.RegionIntensity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Eqmonitor_NotificationPayload.protoMessageName + ".RegionIntensity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "intensity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.intensity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if self.intensity != .unspecified {
      try visitor.visitSingularEnumField(value: self.intensity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eqmonitor_NotificationPayload.RegionIntensity, rhs: Eqmonitor_NotificationPayload.RegionIntensity) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.intensity != rhs.intensity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eqmonitor_NotificationPayload.EewRegionIntensity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Eqmonitor_NotificationPayload.protoMessageName + ".EewRegionIntensity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "intensity"),
    3: .standard(proto: "arrival_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.intensity) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._arrivalTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if self.intensity != .unspecified {
      try visitor.visitSingularEnumField(value: self.intensity, fieldNumber: 2)
    }
    try { if let v = self._arrivalTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eqmonitor_NotificationPayload.EewRegionIntensity, rhs: Eqmonitor_NotificationPayload.EewRegionIntensity) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.intensity != rhs.intensity {return false}
    if lhs._arrivalTime != rhs._arrivalTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Eqmonitor_NotificationPayload.HypoInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Eqmonitor_NotificationPayload.protoMessageName + ".HypoInformation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "name"),
    3: .same(proto: "latitude"),
    4: .same(proto: "longitude"),
    5: .same(proto: "depth"),
    6: .same(proto: "magnitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.latitude) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.longitude) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.depth) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.magnitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.latitude != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 3)
    }
    if self.longitude != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 4)
    }
    if self.depth != 0 {
      try visitor.visitSingularInt32Field(value: self.depth, fieldNumber: 5)
    }
    if self.magnitude != 0 {
      try visitor.visitSingularFloatField(value: self.magnitude, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Eqmonitor_NotificationPayload.HypoInformation, rhs: Eqmonitor_NotificationPayload.HypoInformation) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.name != rhs.name {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.depth != rhs.depth {return false}
    if lhs.magnitude != rhs.magnitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
